[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "Vanguard"
dynamic = ["version"]
description = "Various easy-to-use extensions for Gaussian process models and a framework for composition of extensions."
readme = "README.md"
requires-python = ">=3.8"
keywords = [
    "gaussian-process",
    "pytorch",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
license = {file = "LICENSE.md"}
authors = [
    {name = "GCHQ", email = "oss@gchq.gov.uk"},
]
dependencies = [
    "bibtexparser",
    "gpytorch>=1.11",
    "kmedoids",
    "matplotlib",
    "numpy>=1.20,<2",
    "pandas",
    "scikit-learn",
    "scipy",
    "torch>=1.7.0",
    "typing_extensions",
    "urllib3>=2.2.1",
]

[project.optional-dependencies]
# These match the suffixes on the various requirements-*.txt files
# Run unit tests
test = [
    "pytest-cov",
    "pytest-beartype"
]
# Compile documentation
doc = [
    "furo",
    "nbformat",
    "nbsphinx",
    "pillow",
    "pybtex",
    "setuptools; python_version>='3.12'",  # TODO: Remove once pybtex releases > 0.24.0
    # https://github.com/gchq/Vanguard/issues/246
    "sphinx>=8",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-bibtex",
]
# All tools for a developer including those for running pylint
dev = [
    "vanguard[test, doc]",
    "isort",
    "jupyterlab",
    "pre-commit",
    "pylint",
    "pyright",
    "pyroma",
    "ruff",
]

[project.urls]
#Documentation = "https://example.org/" # TODO: Populate URL once ReadTheDocs URL reserved
# https://github.com/gchq/Vanguard/issues/254
Repository = "https://github.com/gchq/Vanguard"
Issues = "https://github.com/gchq/Vanguard/issues"
#Changelog = "https://github.com/gchq/Vanguard/blob/main/CHANGELOG.md" # TODO: Create CHANGELOG
# https://github.com/gchq/Vanguard/issues/255

[tool.setuptools]
packages = ["vanguard"]

[tool.setuptools.dynamic]
version = {attr = "vanguard.__version__"}

[tool.setuptools.package-data]
vanguard = ["references.bib"]

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]  # Handle Jupyter Notebook files as well.

[tool.ruff.lint]
extend-select = [
    "D201",  # No blank lines allowed before function docstring
    "D202",  # No blank lines allowed after function docstring
    "D211",  # No blank lines allowed before class docstring
    "E501",  # Docstring line lengths
    # TODO: We should enable more of the pydocstyle lints!
    # https://github.com/gchq/Vanguard/issues/256
    "S102",  # use of `exec` builtin
    "S307",  # Suspicious `eval` usage
    "I",     # isort rules
    "UP",    # pyupgrade rules
    "NPY",   # numpy linting rules
    "TID252",# ban relative imports
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [ "TID252" ]  # allow relative imports within tests

[tool.ruff.lint.isort]
known-local-folder = ["confutils","refstyle"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.coverage.run]
command_line = "-m pytest tests/units --cov"
branch = true
relative_files = true
source = ["vanguard"]

[tool.coverage.report]
show_missing = true
sort = "Cover"
exclude_also = [
    "pass",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "raise$",
]

[tool.pytest.ini_options]
markers = [
    "no_beartype: for tests incompatible with beartype (e.g. checking for TypeErrors)",
]

# TODO: fix as many of these as possible, and for those we can't fix, suppress as many as possible at the point that
#  they're emitted using the catch_warnings context manager. Suppress globally here only as a last resort.
# https://github.com/gchq/Vanguard/issues/281
filterwarnings = [
    # Numerical error warnings
    "ignore::linear_operator.utils.warnings.NumericalWarning",
    "ignore:Hit a numerical error:UserWarning",
    "ignore:A regression problem with no warping",

    # Other warnings
    "ignore::pytest.PytestCollectionWarning",
    "ignore::vanguard.warnings.ExperimentalFeatureWarning",
    "ignore:The input matches the stored training data. Did you forget to call model.train\\(\\)\\?:gpytorch.utils.warnings.GPInputWarning",
    "ignore:To copy construct from a tensor, it is recommended to use sourceTensor.clone\\(\\).detach\\(\\):UserWarning",
    "ignore:Pass auto_restart=True to the controller to automatically restart training up to the last stable iterations:UserWarning",
    "ignore:std\\(\\). degrees of freedom is <= 0:UserWarning",
    "ignore:You have passed data through a FixedNoiseGaussianLikelihood that did not match the size of the fixed noise:gpytorch.utils.warnings.GPInputWarning",
    "ignore:To get the last learning rate computed by the scheduler, please use `get_last_lr\\(\\)`:UserWarning",

    # Vanguard being pedantic errors
    # TODO: add ignore_methods to fix these
    # https://github.com/gchq/Vanguard/issues/283
    "ignore::vanguard.decoratorutils.errors.OverwrittenMethodWarning",
    "ignore::vanguard.decoratorutils.errors.UnexpectedMethodWarning",

    # -- Deprecations --
    # TODO: replace with sparse_coo_tensor
    # https://github.com/gchq/Vanguard/issues/278
    "ignore:torch.sparse.SparseTensor\\(indices, values, shape, \\*, device=\\) is deprecated:UserWarning",
    # TODO: replace with some alternative (e.g. beartype.typing.*)
    "ignore::beartype.roar.BeartypeDecorHintPep585DeprecationWarning"
]
